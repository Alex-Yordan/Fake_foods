import os
import sqlite3
import telebot
from telebot import types
from config import TOKEN

bot = telebot.TeleBot(TOKEN)
IMAGE_FOLDER = "images"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS cart (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        dish_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        FOREIGN KEY (dish_id) REFERENCES menu (id)
    )
""")
conn.commit()
conn.close()


def check_category_exists(category):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM menu WHERE category = ?", (category,))
    result = cursor.fetchone()
    conn.close()
    return result is not None


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–∞ –µ–¥—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    show_categories(message)


def show_categories(message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM menu")
    categories = cursor.fetchall()
    conn.close()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for category in categories:
        keyboard.add(types.KeyboardButton(category[0]))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: check_category_exists(message.text))
def show_dishes(message):
    category = message.text
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, price, image_url FROM menu WHERE category = ?", (category,))
    dishes = cursor.fetchall()
    conn.close()

    if dishes:
        keyboard = types.InlineKeyboardMarkup()
        for dish in dishes:
            dish_name, description, price, image_filename = dish
            image_path = os.path.join(IMAGE_FOLDER, image_filename)
            response = f"*{dish_name}*\n_{description}_\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ"

            if os.path.exists(image_path):
                with open(image_path, "rb") as photo:
                    bot.send_photo(message.chat.id, photo, caption=response, parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, response, parse_mode="Markdown")

            row = [
                types.InlineKeyboardButton(f"{dish_name}", callback_data="ignore"),
                types.InlineKeyboardButton("üçΩÔ∏è", callback_data=f"{dish_name}-1"),
                types.InlineKeyboardButton("üçΩÔ∏èüçΩÔ∏è", callback_data=f"{dish_name}-2"),
                types.InlineKeyboardButton("üçΩÔ∏èüçΩÔ∏èüçΩÔ∏è", callback_data=f"{dish_name}-3")
            ]
            keyboard.row(*row)

        keyboard.add(types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥.")


@bot.callback_query_handler(func=lambda call: "-" in call.data)
def handle_dish_selection(call):
    user_id = call.message.chat.id
    dish_name, quantity = call.data.rsplit("-", 1)
    quantity = int(quantity)

    add_to_cart(user_id, dish_name, quantity)
    bot.answer_callback_query(call.id, f"‚úÖ {dish_name} ({quantity} —à—Ç.) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")


def add_to_cart(user_id, dish_name, quantity):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM menu WHERE name=?", (dish_name,))
    dish = cursor.fetchone()

    if dish:
        dish_id = dish[0]
        cursor.execute("INSERT INTO cart (user_id, dish_id, quantity) VALUES (?, ?, ?)", (user_id, dish_id, quantity))
        conn.commit()

    conn.close()


bot.polling(none_stop=True)
