import os
import sqlite3
import telebot
from telebot import types
import time
from config import TOKEN

bot = telebot.TeleBot(TOKEN)
IMAGE_FOLDER = "images"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (order_id)
current_order = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
reviews_page = {}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (—Ç–∞–±–ª–∏—Ü–∞ menu –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω—ë–Ω–Ω–æ–π)
conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS cart (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        dish_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        FOREIGN KEY (dish_id) REFERENCES menu(id)
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS customers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        customer_id INTEGER NOT NULL,
        name TEXT,
        phone TEXT,
        review TEXT,
        FOREIGN KEY (customer_id) REFERENCES customers(id)
    )
""")
conn.commit()
conn.close()


def check_category_exists(category):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –º–µ–Ω—é"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM menu WHERE category = ?", (category,))
    result = cursor.fetchone()
    conn.close()
    return result is not None


@bot.message_handler(commands=['start'])
def start(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ä—Ç' –∏ '–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_btn = types.KeyboardButton("–°—Ç–∞—Ä—Ç")
    reviews_btn = types.KeyboardButton("–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    keyboard.add(start_btn, reviews_btn)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–∞ –µ–¥—ã. –ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ä—Ç")
def handle_start(message):
    """–£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç' –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É"""
    user_id = message.chat.id
    bot.delete_message(user_id, message.message_id)
    show_categories(message)


@bot.message_handler(func=lambda message: message.text == "–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
def handle_reviews(message):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = message.chat.id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if user_id not in reviews_page:
        reviews_page[user_id] = 0

    # –ó–∞–≥—Ä—É–∂–∞–µ–º 5 –æ—Ç–∑—ã–≤–æ–≤
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.name, o.review
        FROM orders o
        WHERE o.review IS NOT NULL
        ORDER BY o.id DESC
        LIMIT 5 OFFSET ?
    """, (reviews_page[user_id] * 5,))
    reviews = cursor.fetchall()
    conn.close()

    if reviews:
        response = "–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        for i, (name, review) in enumerate(reviews, 1):
            response += f"{i}. {name} - {review}\n"

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_reviews"))
        bot.send_message(user_id, response, reply_markup=keyboard)
    else:
        bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")

@bot.callback_query_handler(func=lambda call: call.data == "next_reviews")
def load_next_reviews(call):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ 5 –æ—Ç–∑—ã–≤–æ–≤"""
    user_id = call.message.chat.id

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤
    reviews_page[user_id] += 1

    # –ó–∞–≥—Ä—É–∂–∞–µ–º 5 –æ—Ç–∑—ã–≤–æ–≤
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.name, o.review
        FROM orders o
        WHERE o.review IS NOT NULL
        ORDER BY o.id DESC
        LIMIT 5 OFFSET ?
    """, (reviews_page[user_id] * 5,))
    reviews = cursor.fetchall()
    conn.close()

    if reviews:
        response = "–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        for i, (name, review) in enumerate(reviews, 1):
            response += f"{i}. {name} - {review}\n"

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_reviews"))
        bot.edit_message_text(response, chat_id=user_id, message_id=call.message.message_id, reply_markup=keyboard)
    else:
        bot.edit_message_text("–ë–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.", chat_id=user_id, message_id=call.message.message_id)


def show_categories(message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ InlineKeyboard"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM menu")
    categories = cursor.fetchall()
    conn.close()

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(category[0], callback_data=category[0]))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@bot.callback_query_handler(
    func=lambda call: call.data in [
        c[0] for c in sqlite3.connect("database.db").cursor()
        .execute("SELECT DISTINCT category FROM menu").fetchall()
    ]
)
def show_dishes(call):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª—é–¥–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = call.data
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, price, image_url FROM menu WHERE category = ?", (category,))
    dishes = cursor.fetchall()
    conn.close()

    if dishes:
        for dish in dishes:
            dish_name, description, price, image_filename = dish
            image_path = os.path.join(IMAGE_FOLDER, image_filename)
            response = f"*{dish_name}*\n_{description}_\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ"
            if os.path.exists(image_path):
                with open(image_path, "rb") as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=response, parse_mode="Markdown")
            else:
                bot.send_message(call.message.chat.id, response, parse_mode="Markdown")

            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("üçΩÔ∏è 1", callback_data=f"{dish_name}-1"),
                types.InlineKeyboardButton("üçΩÔ∏èüçΩÔ∏è 2", callback_data=f"{dish_name}-2"),
                types.InlineKeyboardButton("üçΩÔ∏èüçΩÔ∏èüçΩÔ∏è 3", callback_data=f"{dish_name}-3")
            )
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)

        bottom_keyboard = types.InlineKeyboardMarkup()
        bottom_keyboard.add(
            types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        )
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bottom_keyboard)
    else:
        bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥.")


@bot.callback_query_handler(func=lambda call: call.data == "cart")
def show_cart(call):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = call.message.chat.id
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT menu.name, menu.price, cart.quantity, cart.id
        FROM cart
        JOIN menu ON cart.dish_id = menu.id
        WHERE cart.user_id = ?
    """, (user_id,))
    cart_items = cursor.fetchall()
    conn.close()

    if not cart_items:
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total_price = sum(item[2] * item[1] for item in cart_items)
    response = (
        "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
        "üîî –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞, –≤—ã —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.\n\n"
    )
    keyboard = types.InlineKeyboardMarkup()
    for name, price, quantity, cart_id in cart_items:
        dish_text = f"{name} - {quantity} —à—Ç. (üí∞ {price} ‚ÇΩ –∑–∞ —à—Ç.) = {price * quantity} ‚ÇΩ"
        keyboard.add(types.InlineKeyboardButton(dish_text, callback_data=f"remove_{cart_id}"))

    response += f"\nüí∞ *–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ*"
    keyboard.add(types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    bot.send_message(user_id, response, parse_mode="Markdown", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_categories")
def back_to_categories(call):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_categories(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_"))
def remove_from_cart(call):
    """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_id = int(call.data.split("_")[1])
    user_id = call.message.chat.id
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE id = ?", (cart_id,))
    conn.commit()
    conn.close()
    bot.answer_callback_query(call.id, "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    show_cart(call)


@bot.callback_query_handler(func=lambda call: call.data == "clear_cart")
def clear_cart(call):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = call.message.chat.id
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    show_cart(call)


@bot.callback_query_handler(func=lambda call: '-' in call.data)
def add_to_cart(call):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        dish_name, quantity = call.data.split("-")
        quantity = int(quantity)
    except ValueError:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_id = call.message.chat.id
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, price FROM menu WHERE name = ?", (dish_name,))
    dish = cursor.fetchone()
    conn.close()

    if dish:
        dish_id, price = dish
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO cart (user_id, dish_id, quantity)
            VALUES (?, ?, ?)
        """, (user_id, dish_id, quantity))
        conn.commit()
        conn.close()

        bot.answer_callback_query(call.id, f"–ë–ª—é–¥–æ {dish_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ({quantity} —à—Ç.).")
        show_cart(call)
    else:
        bot.answer_callback_query(call.id, f"–ë–ª—é–¥–æ {dish_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.callback_query_handler(func=lambda call: call.data == "pay")
def start_payment(call):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    –ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    """
    user_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM cart WHERE user_id = ?", (user_id,))
    count_cart = cursor.fetchone()[0]
    conn.close()

    if count_cart == 0:
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑
    bot.send_message(user_id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    bot.register_next_step_handler(call.message, get_name)


def get_name(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ orders"""
    user_id = message.chat.id
    name = message.text

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO customers (user_id) VALUES (?)", (user_id,))
    customer_id = cursor.lastrowid
    conn.commit()

    conn.close()

    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    bot.register_next_step_handler(message, get_phone, customer_id)


def get_phone(message, customer_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑"""
    phone = message.text

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO orders (customer_id, name, phone)
        VALUES (?, ?, ?)
    """, (customer_id, message.text, phone))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

    bot.register_next_step_handler(message, save_review)


def save_review(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ"""
    user_id = message.chat.id
    review = message.text

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE orders
        SET review = ?
        WHERE customer_id = (SELECT id FROM customers WHERE user_id = ?)
        ORDER BY id DESC LIMIT 1
    """, (review, user_id))
    conn.commit()
    conn.close()

    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    bot.send_message(user_id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç'.")


bot.polling(none_stop=True)
