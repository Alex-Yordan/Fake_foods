import os
import sqlite3
import telebot
from telebot import types
import time
from config import TOKEN

bot = telebot.TeleBot(TOKEN)
IMAGE_FOLDER = "images"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (order_id)
current_order = {}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (—Ç–∞–±–ª–∏—Ü–∞ menu –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω—ë–Ω–Ω–æ–π)
conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS cart (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        dish_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        FOREIGN KEY (dish_id) REFERENCES menu(id)
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS customers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        customer_id INTEGER NOT NULL,
        name TEXT,
        phone TEXT,
        review TEXT,
        FOREIGN KEY (customer_id) REFERENCES customers(id)
    )
""")
conn.commit()
conn.close()


def check_category_exists(category):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –º–µ–Ω—é"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM menu WHERE category = ?", (category,))
    result = cursor.fetchone()
    conn.close()
    return result is not None


@bot.message_handler(commands=['start'])
def start(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç'"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_btn = types.KeyboardButton("–°—Ç–∞—Ä—Ç")
    keyboard.add(start_btn)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–∞ –µ–¥—ã. –ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ä—Ç")
def handle_start(message):
    """–£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç' –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É"""
    user_id = message.chat.id
    bot.delete_message(user_id, message.message_id)
    show_categories(message)


def show_categories(message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ InlineKeyboard"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM menu")
    categories = cursor.fetchall()
    conn.close()

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(category[0], callback_data=category[0]))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@bot.callback_query_handler(
    func=lambda call: call.data in [
        c[0] for c in sqlite3.connect("database.db").cursor()
        .execute("SELECT DISTINCT category FROM menu").fetchall()
    ]
)
def show_dishes(call):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª—é–¥–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = call.data
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, price, image_url FROM menu WHERE category = ?", (category,))
    dishes = cursor.fetchall()
    conn.close()

    if dishes:
        for dish in dishes:
            dish_name, description, price, image_filename = dish
            image_path = os.path.join(IMAGE_FOLDER, image_filename)
            response = f"*{dish_name}*\n_{description}_\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ"
            if os.path.exists(image_path):
                with open(image_path, "rb") as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=response, parse_mode="Markdown")
            else:
                bot.send_message(call.message.chat.id, response, parse_mode="Markdown")

            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("üçΩÔ∏è 1", callback_data=f"{dish_name}-1"),
                types.InlineKeyboardButton("üçΩÔ∏èüçΩÔ∏è 2", callback_data=f"{dish_name}-2"),
                types.InlineKeyboardButton("üçΩÔ∏èüçΩÔ∏èüçΩÔ∏è 3", callback_data=f"{dish_name}-3")
            )
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)

        bottom_keyboard = types.InlineKeyboardMarkup()
        bottom_keyboard.add(
            types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        )
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bottom_keyboard)
    else:
        bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥.")


@bot.callback_query_handler(func=lambda call: call.data == "cart")
def show_cart(call):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = call.message.chat.id
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT menu.name, menu.price, cart.quantity, cart.id
        FROM cart
        JOIN menu ON cart.dish_id = menu.id
        WHERE cart.user_id = ?
    """, (user_id,))
    cart_items = cursor.fetchall()
    conn.close()

    if not cart_items:
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total_price = sum(item[2] * item[1] for item in cart_items)
    response = (
        "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
        "üîî –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞, –≤—ã —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.\n\n"
    )
    keyboard = types.InlineKeyboardMarkup()
    for name, price, quantity, cart_id in cart_items:
        dish_text = f"{name} - {quantity} —à—Ç. (üí∞ {price} ‚ÇΩ –∑–∞ —à—Ç.) = {price * quantity} ‚ÇΩ"
        keyboard.add(types.InlineKeyboardButton(dish_text, callback_data=f"remove_{cart_id}"))

    response += f"\nüí∞ *–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ*"
    keyboard.add(types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    bot.send_message(user_id, response, parse_mode="Markdown", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_categories")
def back_to_categories(call):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_categories(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_"))
def remove_from_cart(call):
    """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_id = int(call.data.split("_")[1])
    user_id = call.message.chat.id
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE id = ?", (cart_id,))
    conn.commit()
    conn.close()
    bot.answer_callback_query(call.id, "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    show_cart(call)


@bot.callback_query_handler(func=lambda call: call.data == "clear_cart")
def clear_cart(call):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = call.message.chat.id
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    show_cart(call)


@bot.callback_query_handler(func=lambda call: '-' in call.data)
def add_to_cart(call):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        dish_name, quantity = call.data.split("-")
        quantity = int(quantity)
    except ValueError:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_id = call.message.chat.id
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, price FROM menu WHERE name = ?", (dish_name,))
    dish = cursor.fetchone()
    conn.close()

    if dish:
        dish_id, price = dish
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO cart (user_id, dish_id, quantity)
            VALUES (?, ?, ?)
        """, (user_id, dish_id, quantity))
        conn.commit()
        conn.close()

        bot.answer_callback_query(call.id, f"–ë–ª—é–¥–æ {dish_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ({quantity} —à—Ç.).")
        show_cart(call)
    else:
        bot.answer_callback_query(call.id, f"–ë–ª—é–¥–æ {dish_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.callback_query_handler(func=lambda call: call.data == "pay")
def start_payment(call):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    –ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    """
    user_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM cart WHERE user_id = ?", (user_id,))
    count_cart = cursor.fetchone()[0]
    conn.close()

    if count_cart == 0:
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑
    bot.send_message(user_id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    bot.register_next_step_handler(call.message, get_name)


def get_name(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ orders"""
    user_id = message.chat.id
    name = message.text
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ customers –¥–ª—è user_id
    cursor.execute("SELECT id FROM customers WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row is None:
        cursor.execute("INSERT INTO customers (user_id) VALUES (?)", (user_id,))
        conn.commit()
        customer_id = cursor.lastrowid
    else:
        customer_id = row[0]
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    cursor.execute("INSERT INTO orders (customer_id, name) VALUES (?, ?)", (customer_id, name))
    conn.commit()
    order_id = cursor.lastrowid
    conn.close()

    current_order[user_id] = order_id
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    bot.register_next_step_handler(message, get_phone)


def get_phone(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ orders"""
    user_id = message.chat.id
    phone = message.text
    order_id = current_order.get(user_id)
    if order_id is None:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE orders SET phone = ? WHERE id = ?", (phone, order_id))
    conn.commit()
    conn.close()

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #X"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}", callback_data=f"pay_order_{order_id}"))
    bot.send_message(user_id, f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_order_"))
def process_payment(call):
    """
    –ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
    –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–∫–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∑—ã–≤
    """
    order_id = int(call.data.split("_")[-1])
    user_id = call.message.chat.id

    bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
    time.sleep(5)  # –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–ø–ª–∞—Ç—ã

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    bot.send_message(user_id, f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")
    bot.send_message(user_id, "–í–∞—à–∞ –µ–¥–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è! üç≥üë®‚Äçüç≥")
    time.sleep(5)
    bot.send_message(user_id, f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤! üçΩÔ∏è")
    time.sleep(3)
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞! –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤.")

    # –ö–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" –∏ "–ë–µ–∑ –æ—Ç–∑—ã–≤–∞"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review"),
        types.InlineKeyboardButton("–ë–µ–∑ –æ—Ç–∑—ã–≤–∞", callback_data="no_review")
    )
    bot.send_message(user_id, "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "leave_review")
def leave_review_handler(call):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
    –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –æ—Ç–∑—ã–≤ —Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ register_next_step_handler
    """
    user_id = call.message.chat.id
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏).")
    bot.register_next_step_handler(call.message, process_review)


def process_review(message):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∑–∞–∫–∞–∑–µ"""
    user_id = message.chat.id
    review_text = message.text.strip()
    order_id = current_order.get(user_id)

    if not order_id:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑.")
        return

    if review_text.lower() == "–Ω–µ—Ç":
        bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤.")
    else:
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE orders SET review = ? WHERE id = ?", (review_text, order_id))
        conn.commit()
        conn.close()
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

    # –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç" –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_btn = types.KeyboardButton("–°—Ç–∞—Ä—Ç")
    start_keyboard.add(start_btn)
    bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.", reply_markup=start_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "no_review")
def no_review_handler(call):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤"""
    user_id = call.message.chat.id
    bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤.")
    start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_btn = types.KeyboardButton("–°—Ç–∞—Ä—Ç")
    start_keyboard.add(start_btn)
    bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.", reply_markup=start_keyboard)


if __name__ == '__main__':
    bot.polling(none_stop=True)
