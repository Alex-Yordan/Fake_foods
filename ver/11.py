import os
import sqlite3
import telebot
from telebot import types
from config import TOKEN

bot = telebot.TeleBot(TOKEN)
IMAGE_FOLDER = "images"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
conn = sqlite3.connect("../database.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS cart (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        dish_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        FOREIGN KEY (dish_id) REFERENCES menu (id)
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS customers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        name TEXT,
        phone TEXT,
        order_number INTEGER,
        review TEXT
    )
""")
conn.commit()
conn.close()


def check_category_exists(category):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"""
    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM menu WHERE category = ?", (category,))
    result = cursor.fetchone()
    conn.close()
    return result is not None


@bot.message_handler(commands=['start'])
def start(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç'"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–°—Ç–∞—Ä—Ç")
    keyboard.add(start_button)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–∞ –µ–¥—ã. –ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ä—Ç")
def handle_start(message):
    """–£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç' –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É"""
    user_id = message.chat.id
    bot.delete_message(message.chat.id, message.message_id)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç'
    show_categories(message)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π


def show_categories(message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ InlineKeyboard"""
    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM menu")
    categories = cursor.fetchall()
    conn.close()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardMarkup –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(category[0], callback_data=category[0]))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in [category[0] for category in
                                                            sqlite3.connect("../database.db").cursor().execute(
                                                                "SELECT DISTINCT category FROM menu").fetchall()])
def show_dishes(call):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª—é–¥–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = call.data
    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, price, image_url FROM menu WHERE category = ?", (category,))
    dishes = cursor.fetchall()
    conn.close()

    if dishes:
        for dish in dishes:
            dish_name, description, price, image_filename = dish
            image_path = os.path.join(IMAGE_FOLDER, image_filename)
            response = f"*{dish_name}*\n_{description}_\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ"

            if os.path.exists(image_path):
                with open(image_path, "rb") as photo:
                    bot.send_photo(call.message.chat.id, photo, caption=response, parse_mode="Markdown")
            else:
                bot.send_message(call.message.chat.id, response, parse_mode="Markdown")

            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("üçΩÔ∏è 1", callback_data=f"{dish_name}-1"),
                types.InlineKeyboardButton("üçΩÔ∏èüçΩÔ∏è 2", callback_data=f"{dish_name}-2"),
                types.InlineKeyboardButton("üçΩÔ∏èüçΩÔ∏èüçΩÔ∏è 3", callback_data=f"{dish_name}-3")
            )
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)

        bottom_keyboard = types.InlineKeyboardMarkup()
        bottom_keyboard.add(
            types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        )
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bottom_keyboard)
    else:
        bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥.")


@bot.callback_query_handler(func=lambda call: call.data == "cart")
def show_cart(call):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = call.message.chat.id
    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT menu.name, menu.price, cart.quantity, cart.id
        FROM cart
        JOIN menu ON cart.dish_id = menu.id
        WHERE cart.user_id = ?
    """, (user_id,))
    cart_items = cursor.fetchall()
    conn.close()

    if not cart_items:
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total_price = sum(item[2] * item[1] for item in cart_items)
    response = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
    response += "üîî –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞, –≤—ã —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.\n\n"  # –ü–æ—è—Å–Ω–µ–Ω–∏–µ

    keyboard = types.InlineKeyboardMarkup()

    for name, price, quantity, cart_id in cart_items:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        dish_text = f"{name} - {quantity} —à—Ç. (üí∞ {price} ‚ÇΩ –∑–∞ —à—Ç.) = {price * quantity} ‚ÇΩ"
        keyboard.add(
            types.InlineKeyboardButton(dish_text, callback_data=f"remove_{cart_id}")
        )

    response += f"\nüí∞ *–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ*"

    # –ö–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã, –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–∑–∞–¥
    keyboard.add(types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))

    bot.send_message(user_id, response, parse_mode="Markdown", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_categories")
def back_to_categories(call):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_categories(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_"))
def remove_from_cart(call):
    """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_id = int(call.data.split("_")[1])
    user_id = call.message.chat.id

    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE id = ?", (cart_id,))
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    show_cart(call)


@bot.callback_query_handler(func=lambda call: call.data == "clear_cart")
def clear_cart(call):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = call.message.chat.id

    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    show_cart(call)


@bot.callback_query_handler(func=lambda call: '-' in call.data)
def add_to_cart(call):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    dish_name, quantity = call.data.split("-")
    quantity = int(quantity)
    user_id = call.message.chat.id

    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, price FROM menu WHERE name = ?", (dish_name,))
    dish = cursor.fetchone()
    conn.close()

    if dish:
        dish_id, price = dish
        conn = sqlite3.connect("../database.db")
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO cart (user_id, dish_id, quantity)
            VALUES (?, ?, ?)
        """, (user_id, dish_id, quantity))
        conn.commit()
        conn.close()

        bot.answer_callback_query(call.id, f"–ë–ª—é–¥–æ {dish_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ({quantity} —à—Ç.).")
        show_cart(call)


@bot.callback_query_handler(func=lambda call: call.data == "pay")
def start_payment(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    user_id = call.message.chat.id
    bot.send_message(user_id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    bot.register_next_step_handler(call.message, get_name)


def get_name(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"""
    user_id = message.chat.id
    name = message.text

    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO customers (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()

    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    bot.register_next_step_handler(message, get_phone)


def get_phone(message):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"""
    user_id = message.chat.id
    phone = message.text

    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE customers SET phone = ? WHERE user_id = ?", (phone, user_id))
    conn.commit()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    cursor.execute("SELECT MAX(order_number) FROM customers")
    result = cursor.fetchone()
    order_number = result[0] + 1 if result[0] else 1
    cursor.execute("UPDATE customers SET order_number = ? WHERE user_id = ?", (order_number, user_id))
    conn.commit()
    conn.close()

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    bot.send_message(user_id, f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order_number}. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å.")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ {order_number}", callback_data=f"pay_order_{order_number}"))
    bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_order_"))
def process_payment(call):
    """–ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã"""
    order_number = int(call.data.split("_")[-1])
    user_id = call.message.chat.id
    bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ {order_number} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")

    # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ (–æ–ø–ª–∞—Ç–∞)
    import time
    time.sleep(10)

    # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ {order_number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    bot.send_message(user_id, f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order_number} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")
    bot.send_message(user_id, f"–í–∞—à–∞ –µ–¥–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è! üç≥üë®‚Äçüç≥")

    time.sleep(30)

    bot.send_message(user_id, f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order_number} –≥–æ—Ç–æ–≤! üçΩÔ∏è")

    time.sleep(20)

    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞! –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤.")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review"))
    bot.send_message(user_id, "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "leave_review")
def leave_review(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' –∏ '–ë–µ–∑ –æ—Ç–∑—ã–≤–∞'"""
    user_id = call.message.chat.id
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤.", reply_markup=types.ReplyKeyboardRemove())

    # –í–∫–ª—é—á–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" –∏ "–ë–µ–∑ –æ—Ç–∑—ã–≤–∞"
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    send_review_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="send_review")
    no_review_button = types.InlineKeyboardButton("–ë–µ–∑ –æ—Ç–∑—ã–≤–∞", callback_data="no_review")
    keyboard.add(send_review_button, no_review_button)

    bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "send_review")
def send_review(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞"""
    user_id = call.message.chat.id
    review_text = call.message.text

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE customers SET review = ? WHERE user_id = ?", (review_text, user_id))
    conn.commit()
    conn.close()

    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–°—Ç–∞—Ä—Ç")
    start_keyboard.add(start_button)
    bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.", reply_markup=start_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "no_review")
def no_review(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤"""
    user_id = call.message.chat.id

    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Ç–∑—ã–≤ –Ω–µ –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω
    bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–°—Ç–∞—Ä—Ç")
    start_keyboard.add(start_button)
    bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.", reply_markup=start_keyboard)


if __name__ == '__main__':
    bot.polling(none_stop=True)
